;[uwsgi]
;chdir = /flasktest
;module = settings.wsgi:application
;env = /flasktest/venv/
;master = true
;pidfile = /tmp/uwsgi_emu_master.pid
;socket = /tmp/uwsgi_emu_master.sock
;processes = 8
;harakiri = 120
;harakiri-verbose = true
;post-buffering = true
;post-buffering-bufsize = 8388608
;max-requests = 5000000
;home = /flasktest/venv/
;enable-threads = false
;buffer-size = 1048576
;chmod-socket = 666

[uwsgi]
socket = 0.0.0.0:10001
#由于外部还要嵌套Nginx，这里可以使用socket进行通信，如果Nginx和uwsgi部署在同一台机器上，直接使用127.0.0.1
#如果外部直接通过uwsgi访问服务，需将socket改为http-socket或者http，将127.0.0.1改为0.0.0.0
chdir = /flasktest/
#项目目录
env =/flasktest/venv
#虚拟环境所在路径
wsgi-file = app.py
#编写flask代码的py文件
callable = application
#Flask应用对象
master = true
#启动主进程，来管理其他进程
vacuum = true
#设置退出后清理文件
chmod-socket = 664
stats = 0.0.0.0:9191
listen = 4096
#监听队列大小，默认100，太小了一压测队列就满了，调大一点
processes = 4
#uwsgi启动的进程数，可设为机器核数+1
thunder-lock = true
#防止惊群
harakiri = 60
#超时时间（秒）
daemonize = /flasktest/log/uwsgi.log
#进程会在后台运行，并输出日志
pidfile = /flasktest/log/uwsgi.pid